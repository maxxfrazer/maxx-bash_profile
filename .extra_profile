# env config and most other content from http://natelandau.com/my-mac-osx-bash_profile/





#   -----------------------------------------
#   0.  GLOBAL VARIABLE TO CHECK IF INSTALLED
#   -----------------------------------------

export MAXXBASHINSTALLED='TRUE'

source .bash_aliases

#   -------------------------------
#   1.  ENVIRONMENT CONFIGURATION
#   -------------------------------

showPWDNeat() {
  pwd_length=14
  pwd_symbol="..."
  newPWD="${PWD/#$HOME/~}"
  if [ $(echo -n $newPWD | wc -c | tr -d " ") -gt $pwd_length ]
  then
     newPWD=$(echo -n $newPWD | awk -F '/' '{
     print $1 "/" $2 "/.../" $(NF-1) "/" $(NF)}')
  fi
  echo $newPWD
}

#   Change Prompt
#   ------------------------------------------------------------

export CURRENTBRANCHIS='nil'
export LASTDIR='nil'
parse_git_branch() {

    git branch 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1)/"
}
get_git_branch() {
  CURRENTBRANCHIS=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
}
update_last_dir() {
  LASTDIR=`pwd`;
}

    export PS1="\[\e[1m\]________________________________________________________________________________\n\[\e[1;30;]| \$(showPWDNeat)\$(parse_git_branch)\n| => \[\e[0m\]"
    export PS2="\[\e[1;1m\]| => \[\e[0m\]"

#   Set Paths
#   ------------------------------------------------------------
    export PATH="$PATH:/usr/local/bin/"
    export PATH="/usr/local/git/bin:/sw/bin/:/usr/local/bin:/usr/local/:/usr/local/sbin:/usr/local/mysql/bin:$PATH"


#   do not put duplicate commands into the history
#   ------------------------------------------------------------
    export HISTCONTROL=ignoredups


# tell your terminal to wrap lines correctly according to the window size, even if it changes
#   ------------------------------------------------------------
    shopt -s checkwinsize


#   Add colour to terminal
#   from http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
#   ------------------------------------------------------------
  export CLICOLOR=1
  export LSCOLORS=ExFxBxDxCxegedabagacad

#   -----------------------------
#   2.  MAKE TERMINAL BETTER
#   -----------------------------





mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash

#   cleanupDS:  Recursively delete .DS_Store files
#   -------------------------------------------------------------------
    alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

#   finderShowHidden:   Show hidden files in Finder
#   finderHideHidden:   Hide hidden files in Finder
#   -------------------------------------------------------------------
    alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
    alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'


#   cdf:  'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------
    cdf () {
        currFolderPath=$( /usr/bin/osascript <<EOT
            tell application "Finder"
                try
            set currFolder to (folder of the front window as alias)
                on error
            set currFolder to (path to desktop folder as alias)
                end try
                POSIX path of currFolder
            end tell
EOT
        )
        echo "cd to \"$currFolderPath\""
        cd "$currFolderPath"
    }


zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir



#   ---------------------------
#   3.  SEARCHING
#   ---------------------------

alias qfind="find . -name "                 # qfind:    Quickly search for file
ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string



#   ---------------------------
#   4.  GIT
#   ---------------------------

git()
{
   local repo_name

   if [ "$1" = clone ] ; then # git clone is recursive by default, so will download any and all submodules
      set -- "clone" "--recursive" "${@:2}"
      /usr/bin/git "$@"
   else
      if [ "$1" = clonecd ] ; then # git clonecd <url> will clone, and then cd into the folder containing the repo
        local url=$2;
        repo_name=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
        git clone --recursive $url $repo_name;
        cd $repo_name;
      else
          /usr/bin/git "$@"
      fi
   fi
}

# Idea of this from bent's repo with different implementation https://github.com/reqshark/gito

gito() {
  git add -A;
  git commit -m "$*";
  get_git_branch;
  gpull;
  gpush;
}
sgito() {
  sudo git add -A;
  sudo git commit -m "$*";
  get_git_branch;
  sudo git pull origin "$CURRENTBRANCHIS";
  sudo git push origin "$CURRENTBRANCHIS";
}

alias sgita='sudo git add -A'

sgitc() {
  sudo git commit -m "$*";
}
gitc() {
  git commit -m "$*";
}

gpull() {
  git pull origin "$CURRENTBRANCHIS";
}

gpush() {
  git push origin "$CURRENTBRANCHIS";
}
